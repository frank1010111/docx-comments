[build-system]
requires = ["maturin>=0.13"]
build-backend = "maturin"


[project]
name = "docx_comments"
version = "0.2.0"
authors = [{ name = "Frank Male", email = "frank.male@psu.edu" }]
maintainers = [{ name = "Frank Male", email = "frank.male@psu.edu" }]
license = { file = "LICENSE" }

description = "Gather comments from Word docx files"
readme = "README.md"

requires-python = ">=3.9"

classifiers = [
  "License :: OSI Approved :: BSD License",
  "Topic :: Scientific/Engineering",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "License :: OSI Approved :: BSD License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Development Status :: 5 - Production/Stable",
]

dependencies = ["click >=8.1"]

[project.optional-dependencies]
test = ["pytest >=6", "pytest-cov >=3.0", "python-dateutil >=2.8"]
dev = ["pytest >=6"]
docs = [
  "Sphinx>=4.0",
  "myst_parser>=0.13",
  "sphinx-book-theme>=0.1.0",
  "sphinx_copybutton",
]

[project.urls]
homepage = "https://github.com/frank10101111/docx-comments"
[tool.pdm.dev-dependencies]
devtest = ["pytest"]

[project.scripts]
dump_comments = "docx_comments.get_comments:dump_comments"

[tool.maturin]
compatibility = "manylinux2014"
bindings = "pyo3"
python-source = "python"
module-name = "docx_comments._core"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = ["error"]
testpaths = ["tests"]

[tool.coverage.run]
branch = true
source = ["pywaterflood"]

[tool.mypy]
files = "src"
python_version = "3.10"
warn_unused_configs = true
strict = false
show_error_codes = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
ignore_missing_imports = true


[tool.ruff]
line-length = 99
target-version = "py39"

[tool.ruff.lint]
select = [
  "E",
  "F",
  "W",    # flake8
  "B",
  "B904", # flake8-bugbear
  "I",    # isort
  "ARG",  # flake8-unused-arguments
  "C4",   # flake8-comprehensions
  "EM",   # flake8-errmsg
  "ICN",  # flake8-import-conventions
  "ISC",  # flake8-implicit-str-concat
  "PGH",  # pygrep-hooks
  "PIE",  # flake8-pie
  "PL",   # pylint
  "PT",   # flake8-pytest-style
  "PTH",  # flake8-use-pathlib
  "RET",  # flake8-return
  "RUF",  # Ruff-specific
  "SIM",  # flake8-simplify
  "T20",  # flake8-print
  "UP",   # pyupgrade
  "YTT",  # flake8-2020
]
extend-ignore = [
  "PLR",    # Design related pylint codes
  "PT004",  # Use underscore for non-returning fixture (use usefixture instead)
  "ISC001",
]
unfixable = [
  "T20",  # Removes print statements
  "F841", # Removes unused variables
]
exclude = []
flake8-unused-arguments.ignore-variadic-names = true
isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20", "D"] # testing don't need docs
"__init__.py" = ["F401"]  # imported but unused
